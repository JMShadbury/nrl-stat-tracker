name: 'Deploy Backend'
description: 'Deploy to AWS DynamoDB/Fargate Stacks'
inputs:         
    ECR_REPOSITORY:
      description: 'AWS ECR Repository'
      required: true
    ECS_SERVICE:
      description: 'AWS ECS Service'
      required: true               
    ECS_CLUSTER:    
      description: 'AWS ECS Cluster'
      required: true         
    CONTAINER_NAME:
      description: 'Container Name'
      required: true
    awsRole:
      description: 'AWS IAM role'
      required: true
    awsRegion:
      description: 'AWS region'
      required: true
runs:
  using: 'composite'
  steps:
  - name: Checkout
    uses: actions/checkout@v3
  - name: Configure AWS credentials
    uses: aws-actions/configure-aws-credentials@v1.7.0
    with:
      role-to-assume: ${{ inputs.awsRole }}
      aws-region: ${{ inputs.awsRegion }}
      role-session-name: GitHub_to_AWS_via_FederatedOIDC
  - name: Get Latest Data
      run: |
        make getData
  - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1
  - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        cd scripts/app
        aws ecr get-login-password --region ${{ inputs.MY_AWS_REGION }} | docker login --username ${{ inputs.AWS_ECR_USERNAME }} --password-stdin ${{ inputs.AWS_ERC_PASSWD }}
        docker build --platform="linux/amd64" -t ${{ inputs.AWS_ECR_STACK_NAME }} .
        docker tag ${{ inputs.AWS_ECR_IMAGE }} ${{ inputs.AWS_ECR_IMAGE_TAG }}
        docker push ${{ inputs.AWS_ECR_PUSH }}
        aws ecs update-service --cluster $ECS_CLUSTER --service $ECS_SERVICE --force-new-deployment

  
