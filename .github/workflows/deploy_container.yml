name: Deploy to Amazon ECS Container Image

on:
  push:
    branches: [ "main" ]
    paths:
      - scripts/app/*
      - scripts/app/*/*
      - scripts/app/*/*/*

env:          
  ECR_REPOSITORY: ${{ secrets.ECR_NAME }}      
  ECS_SERVICE: ${{ secrets.ECR_SERVICE_NAME }}               
  ECS_CLUSTER: ${{ secrets.ECR_CLUSTER_NAME }}              
  CONTAINER_NAME: ${{ secrets.ECR_CONTAINER_NAME }} 

permissions:
  id-token: write
  contents: read

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    environment: production

    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1.7.0
      with:
        role-to-assume: ${{ secrets.AWS_ROLE }}
        role-session-name: GitHub_to_AWS_via_FederatedOIDC
        aws-region: ${{ secrets.MY_AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        USERNAME: ${{ secrets.AWS_ECR_USERNAME }}
        REGION: ${{ secrets.MY_AWS_REGION }}
        PASSWORD: ${{ secrets.AWS_ECR_PASSWD }}
        STACK_NAME: ${{ secrets.AWS_ECR_STACK_NAME }}
        IMAGE: ${{ secrets.AWS_ECR_IMAGE }}
        IMAGE_TAG: ${{ secrets.AWS_ECR_IMAGE_TAG }}
        CLUSTER: ${{ secrets.ECR_CLUSTER_NAME }}
        SERVICE: ${{ secrets.ECR_SERVICE }}
      run: |
        cd scripts/app
        aws ecr get-login-password --region $REGION | docker login --username $USERNAME --password-stdin $PASSWORD
        docker build --platform="linux/amd64" -t $STACK_NAME .
        docker tag $IMAGE $IMAGE_TAG
        docker push {{ secrets.AWS_ECR_PUSH }}
        aws ecs update-service --cluster $CLUSTER --service $SERVICE --force-new-deployment
